[build-system]
    build-backend = "flit_core.buildapi"
    requires      = ["flit_core >=3.2,<4"]

[project]
    authors = [
        { name = "Various", email = "t&iconnectivityboardfarm@libertyglobal.com" },
    ]
    classifiers = [
        "Intended Audience :: Developers",
        "Intended Audience :: Information Technology",
        "Intended Audience :: Telecommunications Industry",
        "License :: OSI Approved :: BSD License",
        "Programming Language :: Python :: 3",
        "Topic :: Software Development :: Embedded Systems",
        "Topic :: Software Development :: Quality Assurance",
        "Topic :: Software Development :: Testing",
        "Topic :: Software Development :: Testing :: Acceptance",
    ]
    dynamic = ['version', 'description']
    name = "boardfarm"
    readme = "README.md"
    requires-python = ">=3.6"

    dependencies = [
        "aenum",
        "apscheduler",
        "boto3",
        "cdrouter>=0.5.5",
        "debtcollector",
        "distro",
        "dlipower",
        "easysnmp",
        "elasticsearch",
        "Faker",
        "influxdb",
        "jira",
        "jsonschema",
        "matplotlib",
        "mitmproxy",
        "nested_lookup",
        "netaddr",
        "ouimeaux",
        "pandas",
        "pexpect",
        "pluggy>=1.0.0",
        "psutil",
        "pycountry",
        "pycryptodome",
        "pymongo",
        "pyserial",
        "pysmi",
        "pysnmp",
        "pyvirtualdisplay",
        "requests",
        "retry",
        "selenium",
        "simplejson",
        "tabulate",
        "termcolor",
        "unittest2",
        "xmltodict",
        "xvfbwrapper",
        "zeep",
    ]

    [project.optional-dependencies]
        dev = [
            "black",
            "flake8",
            "flake8-bugbear",
            "flake8-docstrings",
            "flake8-rst",
            "flake8-rst-docstrings",
            "mypy",
            "pre-commit",
            "pylint",
            "types-termcolor",
        ]
        doc = ["sphinx"]
        test = [
            "pytest",
            "pytest-cov",
            "pytest-html",
            "pytest-mock",
            "pytest-randomly",
            "pytest-xdist",
        ]

    [project.scripts]
        bft = "boardfarm.bft:main"

    [project.urls]
        Source = "https://github.com/lgirdk/boardfarm"

[tool.commitizen]
    name = "cz_conventional_commits"
    style = [
        ["qmark", "fg:#ff9d00 bold"],
        ["question", "bold"],
        ["answer", "fg:#ff9d00 bold"],
        ["pointer", "fg:#ff9d00 bold"],
        ["highlighted", "fg:#ff9d00 bold"],
        ["selected", "fg:#cc5454"],
        ["separator", "fg:#cc5454"],
        ["instruction", ""],
        ["text", ""],
        ["disabled", "fg:#858585 italic"],
    ]
    tag_format = "$version"
    version = "2022.03.0"
    bump_message = "Bump version to $new_version"
    version_files = [
        "boardfarm/__init__.py:version",
        "pyproject.toml:version",
        "pyproject.toml:current",
    ]

[tool.isort]
    profile = "black"
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "2022.03.0"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "{new_version}"

# For each file to patch, there is a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# pyproject.toml location.
[[tool.tbump.file]]
src = "boardfarm/__init__.py"

[[tool.tbump.file]]
src = "pyproject.toml"
